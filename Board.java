import java.util.Random;

class Board 
{
    // ======================= VARIABLES AND ARRAYS =======================
    
    private GridElement[][] board = new GridElement[9][9];
    
    // Order of setting the values of the rows of the board
    private int[] rowSetOrder = {0, 3, 6, 1, 4, 7, 2, 5, 8};
    
    // First row sequence used when generating board.
    private int[] sequence = new int[9];
    
    // Number of unsolved elements remaining.
    private int numUnknown;
    
    // Random class object for shuffling arrays.
    Random rand = new Random();
    
    // GridElement status constants
    private final boolean HIDDEN = false;
    private final boolean KNOWN = true;
    
    
    // ======================= CONSTRUCTOR =======================
    
    /**
     * Generates sequence, sets it to the board, and shuffles the board to create a puzzle.
     * 
     * @return none
    */
    public Board() 
    {
        generateSequence();
        setBoard();
        
        // Shuffling the board numerous times to ensure more random results.
        for (int i = 0; i < 5; i++) 
        {
            shuffleElems();
        }
    }
    
    //======================= GETTERS AND SETTERS =======================
    
    public int getNumUnknown()
    {
        return numUnknown;
    }
    
    public int getElemVal(int row, int col)
    {
        return board[row][col].getValue();
    }
    
    public boolean getElemStatus(int row, int col)
    {
        return board[row][col].getStatus();
    }
    
    public void setElemStatus(int row, int col, boolean state)
    {
        board[row][col].setStatus(state);
    }
    
    /**
     * The variable numUnknown stores the number of unsolved locations in the grid.
     * When the player correctly guesses a location, this method is called to reduce numUnknown by 1 for the solved location.
     * 
     * @return none
    */
    public void decrementNumUnknown()
    {
        numUnknown--;
    }
    
    // ======================= METHODS =======================
    
    /**
     * Generates a random sequence using the digits 1-9, which will be used as the numbers in the rows 
     * when setting the numbers on the board.
     * 
     * The sequence is randomized to increase the number of possible puzzles.
     * 
     * @return none
    */
    private void generateSequence() 
    {
        // This array will be shuffled to generate the sequence
        int[] nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        
        // The array is shuffled 2 times for each element
        for (int i = 0; i < 18; i++)
        {
            // nextInt generates a number from 0 to bounds - 1
            int index1 = rand.nextInt(9);
            int index2 = rand.nextInt(9);
            
            // Ensures that two different indexes are chosen
            while (index2 == index1) 
            {
                index2 = rand.nextInt(9);
            }
            
            int temp = nums[index2];
            
            // Swapping the two numbers
            nums[index2] = nums[index1];
            nums[index1] = temp;
        }
        
        sequence = nums;
    }
    
    /**
     * The sequence generated by generateSequence() is set to a row then cyclically shifted in the order specified by rowSetOrder.
     * This process transposes the row from horizontally vertically, ensuring that each column only has the digits 1-9 once.
     * 
     * @return none
    */
    private void setBoard() 
    {
        // Sets the specific sequence to the specific row   
        for (int curRow : rowSetOrder) 
        {
            // Copies the values of the sequence into the board row
            for (int i = 0; i < board[curRow].length; i++)
            {
                board[curRow][i] = new GridElement(sequence[i]);
            }
            
            // rotates the sequence for the next row.
            cyclicRotate();
        }
    }

    /**
     * This shifts the array one time to the right. 
     * The element at the end will be brought to the start of the array.
     * 
     * @return none
    */
    private void cyclicRotate() 
    {
        int last = sequence[8];
        
        // Moves all array elements one index to the right.
        for (int i = 7; i >= 0; i--) 
        {
            sequence[i + 1] = sequence[i];
        }
        
        sequence[0] = last;
    }
    
    /**
     * Shuffles the numbers in the board. This will swap a column, then a row.
     * This is done to increase the number of possible puzzles.
     * 
     * @return none
    */
    private void shuffleElems()
    {
        // This process is repeated 3 times, once for each 3x3 subsquare column/row
        for (int i = 0; i < 3; i++)
        {
            // This will be either 2, 5, or 8, which are the last indexes of each square
            int highest = (3 * i) + 2;
            
            // This will either be 0, 3, or 6, which are the first indexes of each square
            int lowest = 3 * i;
            
            // Swapping in-square columns ====================
            
            // Chooses two columns in a given square
            // The below call ensures that the column number will be within the ranges of the square
            int col1 = rand.nextInt(highest - lowest + 1) + lowest;
            int col2 = rand.nextInt(highest - lowest + 1) + lowest;
            
            // Ensures that there will be two different columns
            while (col2 == col1) 
            {
                col2 = rand.nextInt(highest - lowest + 1) + lowest;
            }
            
            // Swaps the values at each element in the column
            for (int j = 0; j < 9; j++)
            {
                GridElement temp = board[j][col2];
                
                board[j][col2] = board[j][col1];
                board[j][col1] = temp;
            }
            
            // Swapping in-square rows ========================
            
            // Generates row values within the ranges of a specific square
            int row1 = rand.nextInt(highest - lowest + 1) + lowest;
            int row2 = rand.nextInt(highest - lowest + 1) + lowest;
            
            while (row2 == row1) 
            {
                row2 = rand.nextInt(highest - lowest + 1) + lowest;
            }
            
            for (int j = 0; j < 9; j++)
            {
                GridElement temp = board[row2][j];
                
                board[row2][j] = board[row1][j];
                board[row1][j] = temp;
            }
        }
    }
    
    /**
     * Sets the initially revealed (given) numbers on the board by randomly choosing locations and 
     * setting the element there to KNOWN so that it will be revealed when the game starts.
     * The number is determined by the difficulty the player specifies.
     * 
     * @param difficulty The player's chosen difficulty
     * 
     * @return none
    */
    public void setGivens(String difficulty)
    {
        int max;
        int min;
        
        switch (difficulty)
        {
            case "test":
                max = 80;
                min = 80;
                break;
            case "easy":
                max = 50;
                min = 40;
                break;
                
            case "medium":
                max = 40;
                min = 30;
                break;
                
            case "hard":
                max = 30;
                min = 25;
                break;
                
            case "expert":
                max = 25;
                min = 20;
                break;
            
            // This is for when the user enters something that is not an option
            default:
                max = 50;
                min = 20;
                break;
        }
        
        int numGivens = rand.nextInt(max - min + 1) + min;
        
        // 81 is 9*9, or the number of squares in the grid
        numUnknown = 81 - numGivens;
        
        // Randomly setting givens
        for (int i = 0; i < numGivens; i++)
        {
            int randRow = rand.nextInt(9);
            int randCol = rand.nextInt(9);
            
            // If the chosen index is already known, pick a different index
            while (board[randRow][randCol].getStatus() == KNOWN)
            {
                randRow = rand.nextInt(9);
                randCol = rand.nextInt(9);
            }
            
            board[randRow][randCol].setStatus(KNOWN);
        }
    }
    
    /**
     * Prints out the board with labels for the columns and rows, and dividers between each 3x3 subsquare.
     * Known locations have their values printed, and unknown values have a dash (-) printed.
     * 
     * @return none
    */
    public void printBoard() 
    {
        System.out.println("    1 2 3   4 5 6   7 8 9");
        System.out.println("  -------------------------");
        
        for (int i = 0; i < 9; i++) 
        {
            
            System.out.print((i + 1) + " | ");
            
            for (int j = 0; j < 9; j++) 
            {
                GridElement cur = board[i][j];
                
                if (cur.getStatus() == KNOWN) 
                {
                    System.out.print(cur.getValue() + " ");
                }
                else 
                {
                    System.out.print("- ");
                }
                
                if (j == 2 || j == 5 || j == 8) 
                {
                    System.out.print("| ");
                }
            }
            
            if (i == 2 || i == 5) 
            {
                System.out.print("\n  -------------------------");
            }
            
            System.out.println();
        }
        
        System.out.println("  -------------------------");
    }
}